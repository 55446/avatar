

available_spies = {
	base = 0
	modifier = {
		set_temp_variable = { spies = modifier@operative_slot }
		add_to_temp_variable = { spies = available_spies }
		subtract_from_temp_variable = { spies = removed_spies }
		
		add = spies
	}
}

local_spies = {
	base = 0
	modifier = {
		set_temp_variable = { local_spies = 0 }

		add_to_temp_variable = { local_spies = ROOT:spies_send_to_@FROM }
		
		add = local_spies
	}
}

local_network_strength = {
	base = 0
	modifier = {

		set_temp_variable = { spy_strength = ROOT.spies_send_to_@THIS }
		divide_temp_variable = { spy_strength = THIS.num_controlled_states }
		ROOT = {
			multiply_temp_variable = { spy_strength = mtth:intel_network_factor }
		}
		FROM = {
			multiply_temp_variable = { spy_strength = mtth:enemy_intel_network_factor }
		}

		add = spy_strength
	}

}

local_network_strength_100 = {
	base = 0
	modifier = {

		set_temp_variable = { spy_strength = mtth:local_network_strength }
		multiply_temp_variable = { spy_strength = 100 }

		add = spy_strength
	}
}

spy_detection_chance = {
	base = 0
	modifier = {

		set_temp_variable = { detection_chance = mtth:available_spies }
		divide_temp_variable = { detection_chance = THIS.num_controlled_states }
		multiply_temp_variable = { detection_chance = 0.1 }
		multiply_temp_variable = { detection_chance = mtth:local_spies }

		ROOT = {
			multiply_temp_variable = { detection_chance = mtth:detection_chance }
		}
		FROM = {
			multiply_temp_variable = { detection_chance = mtth:enemy_detection_chance }
		}

		add = detection_chance
	}
}

spy_kill_chance = {
	base = 0
	modifier = {

		set_temp_variable = { kill_chance = mtth:local_spies }
		divide_temp_variable = { kill_chance = THIS.num_controlled_states }
		multiply_temp_variable = { kill_chance = 0.1 }
		multiply_temp_variable = { kill_chance = mtth:available_spies }

		ROOT = {
			multiply_temp_variable = { kill_chance = modifier@operative_death_on_capture_chance }
		}

		add = kill_chance
	}
}

cypher_advantage = {
	base = 0
	modifier = {

		set_temp_variable = { cypher_advantage = 0.1 }
		ROOT = {
			set_temp_variable = { decryption_var = modifier@decryption }
			multiply_temp_variable = { decryption_var = mtth:decryption_factor }
		}
		FROM = {
			set_temp_variable = { encryption_var = modifier@encryption }
			multiply_temp_variable = { encryption_var = mtth:encryption_factor }
		}
		add_to_temp_variable = { decryption_var = 1 }
		add_to_temp_variable = { encryption_var = 1 }
		divide_temp_variable = { decryption_var = encryption_var }
		multiply_temp_variable = { cypher_advantage = decryption_var }

		add = cypher_advantage
	}
	modifier = {

		check_variable = { ROOT.modifier@decryption = 0 }

		factor = 0
	}
}