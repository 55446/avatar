on_actions = {

	on_startup = {
		effect = {


		###### too lagy to calculate at once, has to check 198025 states for the limit trigger

		### events spread the innitial calcualtion over some hours and then its only updated 
		### for some states daily
			
			every_country = {
				country_event = {
					id = refugee_calc.2
					hours = 12
					random_hours = 92
				}
			}

		}
	}

	on_daily = {
		effect = {
			every_controlled_state = {

				limit = {
					check_variable = { modifier@monthly_migration_state < 0 }
				}

				add_to_variable = { THIS.migrant_check_state = 1 }
				if = {
					limit = {
						check_variable = { THIS.migrant_check_state > states^num }
					}
					set_variable = { THIS.migrant_check_state = 1 }
				}

				save_event_target_as = migration_origin

				random_scope_in_array = {
					array = available_migrant_states_array
					
					if = {
						limit = {
							is_valid_migration_target = yes
						}
						if = {
							limit = {
								NOT = {
									is_in_array = { PREV.available_migrant_states_array = THIS.id }
								}
							}
							add_to_array = {
								array = PREV.available_migrant_states_array
								value = THIS.id
							}
						}
					}
				}

				var:migrant_check_state = {

					if = {
						limit = {
							is_valid_migration_target = yes
						}
						if = {
							limit = {
								NOT = {
									is_in_array = { PREV.available_migrant_states_array = THIS.id }
								}
							}
							add_to_array = {
								array = PREV.available_migrant_states_array
								value = THIS.id
							}
						}
					}
					else_if = {
						limit = {
							is_in_array = { PREV.available_migrant_states_array = THIS.id }
						}
						remove_from_array = { PREV.available_migrant_states_array = THIS.id }
					}
				}
			}
		}
	}

	on_monthly = {
		effect = {

			### peoples initiative


			if = {
				limit = {
					check_variable = { peoples_investment_ic > 1000 }
				}
				while_loop_effect = {
					
					limit = {
						check_variable = { peoples_investment_ic = 1000 compare = greater_than }
					}
				
					peoples_initiative_construction_effect = yes
				}
			}



			### migration improved mechanic

			if = {
				limit = {
					has_country_flag = calculator
				}

				set_variable = { global.max_refugees_accepted = 0 }

				### set_variable = { global.migrat_1 = 0 }
				### set_variable = { global.migrat_2 = 0 }

				every_state = {
					### migration attraction
					set_variable = { local_migration_attraction = mtth:urbanisation_migration_attraction }
					add_to_variable = { local_migration_attraction = mtth:workers_needed }
					subtract_from_variable = { local_migration_attraction = mtth:workers_number }

					set_variable = { local_migration_factor = 1 }
					add_to_variable = { local_migration_factor = modifier@migration_attraction }
					controller = {
						add_to_variable = { PREV.local_migration_factor = modifier@migration_attraction }
					}

					multiply_variable = { local_migration_attraction = local_migration_factor }
					clamp_variable = {
						var = local_migration_attraction
						min = 0.001
					}

					set_variable = { refugees_accepted_last_month = 0 }
					set_variable = { migrant_states_value = 0 }
					set_variable = { available_migrant_states = 0 }
					set_variable = { received_migrants = 0 }
					set_variable = { target_of_migrants = 0 }
					set_variable = { migrating_population = 0 }
				}

				every_state = {
					if = {
						limit = {
							AND = {
								check_variable = { modifier@monthly_migration_state < 0 }
							}
						}
						set_variable = { migrating_population = state_population }
						multiply_variable = { migrating_population = modifier@monthly_migration_state }
						round_variable = migrating_population
					
						add_manpower = var:migrating_population

						multiply_variable = { migrating_population = -1 }


						set_variable = { available_migrant_states = 0 }

						#### states they can go to

						for_each_scope_loop = {
							array = available_migrant_states_array
							
							set_variable = { potential_migrants = 0 }

							add_to_variable = { target_of_migrants = 1 }

							set_variable = { potential_migrants = PREV.migrating_population }

							add_to_variable = { PREV.migrant_states_value = local_migration_attraction }

							add_to_variable = { PREV.available_migrant_states = 1 }
						}


						### actual adding of migrants

						for_each_scope_loop = {
							array = available_migrant_states_array
							
							set_variable = { received_migrants = local_migration_attraction }

							divide_variable = { received_migrants = PREV.migrant_states_value }
							multiply_variable = { received_migrants = potential_migrants }
							add_to_variable = { refugees_accepted_last_month = received_migrants }
						}
					}
				}

				every_state = {

					round_variable = refugees_accepted_last_month


					###### test to see if migration adds up

					###  add_to_variable = { global.migrat_1 = refugees_accepted_last_month }
					###  add_to_variable = { global.migrat_2 = migrating_population }

					#### potential fluctuation here, but not everyone can survive and some are born along the way ;D

					set_temp_variable = { migration_clamp = refugees_accepted_last_month }
					subtract_from_temp_variable = { migration_clamp = migrating_population }

					clamp_variable = {
						var = global.max_refugees_accepted
						min = migration_clamp
					}




					#################################### prosperity ### unrelated economy code ##########
					
					clamp_variable = {
						var = global.max_local_prosperity
						min = local_prosperity
					}

					#####################################################################################
					add_manpower = var:refugees_accepted_last_month

					if = {
						limit = {
							AND = {
								check_variable = { refugees_accepted_last_month > 100 }
								NOT = {

									###   state is managing refugees
									OR = {
										has_dynamic_modifier = { modifier = refugee_node }
										has_dynamic_modifier = { modifier = migration_target }
									}
								}
							}
						}

						save_event_target_as = migration_state
						controller = {
							country_event = {
								id = refugee_event.1
								days = 1
								random_days = 2
							}
						}
					}
				}

			}






			#### population counter

			population_counter = yes
			
		}
	}

}